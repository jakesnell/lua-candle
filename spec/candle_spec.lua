local candle = require "candle"

describe("candle", function()
  describe("should have tensors", function()
    it("should implement shape", function()
      local tensor = candle.zeros({ 5, 2 }, candle.f32)
      assert.are.same(tensor:shape(), { 5, 2 })
    end)
    it("should implement rank", function()
      local tensor = candle.zeros({ 5, 2 }, candle.f32)
      assert.are.equal(tensor:rank(), 2)
    end)
    it("should implement dtype", function()
      local tensor = candle.zeros({ 5, 2 }, candle.f32)
      -- TODO: implement actual equality
      assert.are.equal(tostring(tensor:dtype()), "F32")
    end)
    it("should be able to initialize from integers", function()
      local tensor = candle.Tensor(2)
      assert.are.equal(tostring(tensor:dtype()), "U32")
    end)
    it("should be able to initialize from floating point", function()
      local tensor = candle.Tensor(2.)
      assert.are.equal(tostring(tensor:dtype()), "F64")
    end)
    it("should implement initialization from a table", function()
      local tensor = candle.Tensor({ 3., 1., 4. })
      local shape = tensor:shape()
      assert.are.same(shape, { 3 })
    end)
    it("should implement initialization from a nested table", function()
      local tensor = candle.Tensor({ { 3., 1., 4 }, { 4., 2., 7. } })
      local shape = tensor:shape()
      assert.are.same(shape, { 2, 3 })
    end)
  end)
end)
